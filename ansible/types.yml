tosca_definitions_version: alien_dsl_3_0_0


metadata:
  template_name: dls.ansible
  template_version: 1.2.0
  template_author: loicalbertin


imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:3.0.0
  - yorc-types:1.1.0
  - eflows4hpc.env:1.0.0

node_types:
  dls.ansible.nodes.DLSDAGRun:
    derived_from: org.alien4cloud.nodes.Job
    metadata:
      icon: airflow-icon.png
    properties:
      dls_api_url:
        type: string
        required: false
      dls_api_username:
        type: string
        required: true
      dls_api_password:
        type: string
        required: true
      dag_id:
        type: string
        required: true
      extra_conf:
        type: map
        required: false
        entry_schema:
          description: map of key/value to pass to the dag as inputs
          type: string
      debug:
        type: boolean
        description: Do not redact sensible information on logs
        default: false
      user_id:
        type: string
        description: User id to use for authentication may be replaced with workflow input
        required: false
        default: ""
      vault_id:
        type: string
        description: User id to use for authentication may be replaced with workflow input
        required: false
        default: ""
      run_in_standard_mode:
        type: boolean
        required: false
        default: false
    requirements:
      - environment:
          capability: eflows4hpc.env.capabilities.ExecutionEnvironment
          relationship: tosca.relationships.DependsOn
          occurrences: [ 0, UNBOUNDED ]
    interfaces:
      Standard:
        inputs:
          run_in_standard_mode: { get_property: [ SELF, run_in_standard_mode ] }
          submit_tasks: "submit_dag_generic.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }

        start: playbooks/start_in_standard_mode.yaml
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          submit_tasks: "submit_dag_generic.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }

        submit: playbooks/submit_dag.yaml
        run: playbooks/monitor_dag.yaml

  dls.ansible.nodes.DLSDAGStageInData:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      oid:
        type: string
        description: Transferred Object ID
        required: false
      target_host:
        type: string
        description: the remote host
        required: false
      target_path:
        type: string
        description: path of the file on the remote host
        required: false
      input_name_for_oid:
        type: string
        description:
        required: true
        default : "oid"
      input_name_for_target_path:
        type: string
        description:
        required: true
        default : "oid"
    interfaces:
      Standard:
        inputs:
          run_in_standard_mode: { get_property: [ SELF, run_in_standard_mode ] }
          submit_tasks: "submit_dag_stagein_data.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        start:
          inputs:
            oid: { get_property: [ SELF, oid ] }
            target_path: { get_property: [ SELF, target_path ] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
          implementation: playbooks/start_in_standard_mode.yaml

      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          submit_tasks: "submit_dag_stagein_data.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        submit:
          implementation: playbooks/submit_dag.yaml
          inputs:
            oid: { get_property: [ SELF, oid ] }
            oid_input: { get_input_nf: [get_property: [SELF, input_name_for_oid]] }
            target_path: { get_property: [ SELF, target_path ] }
            target_path_input: { get_input_nf: [get_property: [SELF, input_name_for_target_path]] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }

  dls.ansible.nodes.HTTP2SSH:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      dag_id:
        type: string
        required: true
        default: plainhttp2ssh
      url:
        type: string
        description: URL of the file to transfer
        required: false
      force:
        type: boolean
        description: Force transfer of data even if target file already exists
        required: false
        default: true
      target_host:
        type: string
        description: the remote host
        required: false
      target_path:
        type: string
        description: path of the file on the remote host
        required: false
      input_name_for_url:
        type: string
        description: >
          Name of the workflow input to use to retrieve the URL.
          If an input with this name exists for the workflow, it overrides the url property.
        required: true
        default : "url"
      input_name_for_target_path:
        type: string
        description: >
          Name of the workflow input to use to retrieve the target path.
          If an input with this name exists for the workflow, it overrides the target_path property.
        required: true
        default : "target_path"
    interfaces:
      Standard:
        inputs:
          run_in_standard_mode: { get_property: [ SELF, run_in_standard_mode ] }
          submit_tasks: "submit_dag_http2ssh_data.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        start:
          inputs:
            url: { get_property: [ SELF, url ] }
            force: { get_property: [ SELF, force ] }
            target_path: { get_property: [ SELF, target_path ] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
          implementation: playbooks/start_in_standard_mode.yaml

      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          submit_tasks: "submit_dag_http2ssh_data.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        submit:
          implementation: playbooks/submit_dag.yaml
          inputs:
            force: { get_property: [ SELF, force ] }
            url: { get_property: [ SELF, url ] }
            url_input: { get_input_nf: [get_property: [SELF, input_name_for_url]] }
            target_path: { get_property: [ SELF, target_path ] }
            target_path_input: { get_input_nf: [get_property: [SELF, input_name_for_target_path]] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }

  dls.ansible.nodes.DLSDAGStageOutData:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      mid:
        type: string
        description: Uploaded Metadata ID
        required: false
      target_host:
        type: string
        description: the remote host
        required: false
      source_path:
        type: string
        description: path of the file on the remote host
        required: false
      register:
        type: boolean
        description: Should the record created in b2share be registered with data cat
        required: false
        default: false
      input_name_for_mid:
        type: string
        required: true
        default: mid
      input_name_for_source_path:
        type: string
        required: true
        default: source_path
      input_name_for_register:
        type: string
        required: true
        default: register
    interfaces:
      Standard:
        inputs:
          run_in_standard_mode: { get_property: [ SELF, run_in_standard_mode ] }
          submit_tasks: "submit_dag_stageout_data.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        start:
          implementation: playbooks/start_in_standard_mode.yaml
          inputs:
            mid: { get_property: [ SELF, mid ] }
            source_path: { get_property: [ SELF, source_path ] }
            register: { get_property: [ SELF, register ] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }

      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          submit_tasks: "submit_dag_stageout_data.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        submit:
          implementation: playbooks/submit_dag.yaml
          inputs:
            mid: { get_property: [ SELF, mid ] }
            mid_input: { get_input_nf: [get_property: [SELF, input_name_for_mid]] }
            source_path: { get_property: [ SELF, source_path ] }
            source_path_input: { get_input_nf: [get_property: [SELF, input_name_for_source_path]] }
            register: { get_property: [ SELF, register ] }
            register_input: { get_input_nf: [get_property: [SELF, input_name_for_register]] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }

  dls.ansible.nodes.DLSDAGImageTransfer:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      image_id:
        type: string
        description: The image id to transfer
        required: false
      target_host:
        type: string
        description: the remote host
        required: false
      target_path:
        type: string
        description: path of the file on the remote host
        required: false
      run_in_standard_mode:
        type: boolean
        required: false
        default: true
    attributes:
      image_file_path_submit: { get_operation_output: [ SELF, tosca.interfaces.node.lifecycle.Runnable, submit, image_file_path ] }
      image_file_path_start: { get_operation_output: [ SELF, Standard, start, image_file_path ] }
    interfaces:
      Standard:
        inputs:
          run_in_standard_mode: { get_property: [ SELF, run_in_standard_mode ] }
          submit_tasks: "submit_dag_image_transfer.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        start:
          implementation: playbooks/start_in_standard_mode.yaml
          inputs:
            builded_file_name_start: { get_attribute: [ REQ_TARGET, dependency, filename_start] }
            builded_file_name_run: { get_attribute: [ REQ_TARGET, dependency, filename_run] }
            image_id: { get_property: [ SELF, image_id ] }
            target_path: { get_property: [ SELF, target_path ] }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }

      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          submit_tasks: "submit_dag_image_transfer.yaml"
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_url_from_env: { get_attribute: [ REQ_TARGET, environment, dls_api_url] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
          conf: { get_property: [ SELF, extra_conf ] }
        submit:
          implementation: playbooks/submit_dag.yaml
          inputs:
            builded_file_name_start: { get_attribute: [ REQ_TARGET, dependency, filename_start] }
            builded_file_name_run: { get_attribute: [ REQ_TARGET, dependency, filename_run] }
            image_id: { get_property: [ SELF, image_id ] }
            image_id_input: { get_input: image_id }
            target_path: { get_property: [ SELF, target_path ] }
            target_path_input: { get_input: image_target_path }
            host: { get_property: [ SELF, target_host ] }
            host_from_env: { get_attribute: [ REQ_TARGET, environment, cluster_login_host] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }

