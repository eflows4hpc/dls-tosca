tosca_definitions_version: alien_dsl_3_0_0


metadata:
  template_name: dls.ansible
  template_version: 1.1.0
  template_author: loicalbertin


imports:
  - tosca-normative-types:1.0.0-ALIEN20
  - alien-base-types:3.0.0
  - yorc-types:1.1.0

node_types:
  dls.ansible.nodes.DLSDAGRun:
    derived_from: org.alien4cloud.nodes.Job
    metadata:
      icon: airflow-icon.png
    properties:
      dls_api_url:
        type: string
        required: true
      dls_api_username:
        type: string
        required: true
      dls_api_password:
        type: string
        required: true
      dag_id:
        type: string
        required: true
      extra_conf:
        type: map
        required: false
        entry_schema:
          description: map of key/value to pass to the dag as inputs
          type: string
      debug:
        type: boolean
        description: Do not redact sensible information on logs
        default: false
      user_id:
        type: string
        description: User id to use for authentication may be replaced with workflow input
        required: false
        default: ""
      vault_id:
        type: string
        description: User id to use for authentication may be replaced with workflow input
        required: false
        default: ""
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
        submit:
          inputs:
            conf: { get_property: [ SELF, extra_conf ] }
          implementation: playbooks/submit_dag_generic.yaml
        run: playbooks/monitor_dag.yaml

  dls.ansible.nodes.DLSDAGStageInData:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      oid:
        type: string
        description: Transferred Object ID
        required: false
      target_host:
        type: string
        description: the remote host
        required: true
      target_path:
        type: string
        description: path of the file on the remote host
        required: false
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
        submit:
          inputs:
            conf: { get_property: [ SELF, extra_conf ] }
            oid: { get_property: [ SELF, oid ] }
            oid_input: { get_input: oid }
            target_path: { get_property: [ SELF, target_path ] }
            target_path_input: { get_input: target_path }
            host: { get_property: [ SELF, target_host ] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }
          implementation: playbooks/submit_dag_stagein_data.yaml

  dls.ansible.nodes.DLSDAGStageOutData:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      mid:
        type: string
        description: Uploaded Metadata ID
        required: true
      target_host:
        type: string
        description: the remote host
        required: true
      source_path:
        type: string
        description: path of the file on the remote host
        required: false
      register:
        type: boolean
        description: Should the record created in b2share be registered with data cat
        required: false
        default: false
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
        submit:
          inputs:
            conf: { get_property: [ SELF, extra_conf ] }
            mid: { get_property: [ SELF, mid ] }
            mid_input: { get_input: mid }
            source_path: { get_property: [ SELF, source_path ] }
            source_path_input: { get_input: source_path }
            register: { get_property: [ SELF, register ] }
            register_input: { get_input: register }
            host: { get_property: [ SELF, target_host ] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }
          implementation: playbooks/submit_dag_stageout_data.yaml


  dls.ansible.nodes.DLSDAGImageTransfer:
    derived_from: dls.ansible.nodes.DLSDAGRun
    metadata:
      icon: airflow-icon.png
    properties:
      image_id:
        type: string
        description: The image id to transfer
        required: false
      target_host:
        type: string
        description: the remote host
        required: true
      target_path:
        type: string
        description: path of the file on the remote host
        required: false
    attributes:
      image_file_path: { get_operation_output: [ SELF, tosca.interfaces.node.lifecycle.Runnable, submit, image_file_path ] }
    interfaces:
      tosca.interfaces.node.lifecycle.Runnable:
        inputs:
          dls_api_url: { get_property: [ SELF, dls_api_url ] }
          dls_api_username: { get_property: [ SELF, dls_api_username ] }
          dls_api_password: { get_property: [ SELF, dls_api_password ] }
          dag_id: { get_property: [ SELF, dag_id ] }
          debug_logs: { get_property: [ SELF, debug ] }
        submit:
          inputs:
            builded_file_name: { get_attribute: [ REQ_TARGET, dependency, filename] }
            conf: { get_property: [ SELF, extra_conf ] }
            image_id: { get_property: [ SELF, image_id ] }
            image_id_input: { get_input: image_id }
            target_path: { get_property: [ SELF, target_path ] }
            target_path_input: { get_input: image_target_path }
            host: { get_property: [ SELF, target_host ] }
            port: "22"
            login: { get_property: [ SELF, user_id ] }
            vault_id: { get_property: [ SELF, vault_id ] }
            login_input: { get_input: user_id }
            vault_id_input: { get_input: vault_id }
          implementation: playbooks/submit_dag_image_transfer.yaml

